"""

-------------
SAML Protocol
-------------

<samlp:AuthnRequest xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    ID="identifier_1"
    Version="2.0"
    IssueInstant="2004-12-05T09:21:59Z"
    AssertionConsumerServiceIndex="1">
    <!-- TODO: how to request attributes assertion -->
    <saml:Subject>
        <saml:NameID Format="app@host#user">app@host#user</saml:NameID>
        <!-- info on how subject is verified: transport or key/challenge  -->
        <saml:SubjectConfirmation
           Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
           <saml:SubjectConfirmationData Address="host fqdn or ip">
		<ds:KeyInfo></ds:KeyInfo>
           </saml:SubjectConfirmationData>
        </saml:SubjectConfirmation>
    </saml:Subject>

    <saml:NameIDPolicy
        AllowCreate="false"
        Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/>

    <saml:Conditions
        NotBefore="2005-01-31T12:00:00Z"
        NotOnOrAfter="2005-01-31T12:10:00Z">

        <saml:OneTimeUse/>

        <!-- who can proxy this assertion -->
        <saml:ProxyRestriction count="1">
            <saml:Audience>https://px.example.com/SAML2</saml:Audience>
        </saml:ProxyRestriction>
        <!-- who this assertion is intended -->
        <saml:AudienceRestriction>
           <saml:Audience Format="app@host#user">srvs-a@jzsrv.y.c#jz</saml:Audience>
        </saml:AudienceRestriction>
    </saml:Conditions>
    
    <samlp:Extensions>
        <saml:AttributeStatement>
            <saml:Attribute Name="binary">
                <!-- first one is the "main" executable, modules afterwards -->
                <saml:AttributeValue xsi:type="xs:string" subname="path2binary"/>
            </saml:Attribute>

            <saml:Attribute Name="rt-ctx">
                <saml:AttributeValue xsi:type="xs:string" Name="bin-dir"/>
                <saml:AttributeValue xsi:type="xs:string" Name="cmdargs"/>
                <saml:AttributeValue xsi:type="xs:string" Name="exe_cwd"/>
                <saml:AttributeValue xsi:type="xs:string" Name="exe_root"/>
                <saml:AttributeValue xsi:type="xs:string" Name="env:env1"/>
                <saml:AttributeValue xsi:type="xs:string" Name="env:env2"/>
            </saml:Attribute>

            <saml:Attribute Name="app-ctx">
                <saml:AttributeValue xsi:type="xs:string" Name="ctx-name1"/>
                <saml:AttributeValue xsi:type="xs:string" Name="ctx-name2"/>
            </saml:Attribute>

            <saml:Attribute Name="sys-ctx">
                <saml:AttributeValue xsi:type="xs:string" Name="ctx-name1"/>
                <saml:AttributeValue xsi:type="xs:string" Name="ctx-name2"/>
            </saml:Attribute>

            <saml:Attribute Name="roles">
                <!--rolename is preferrably service scoped, or only return
                    roles applicable to a service. 
                    due to need-to-know, for each service listed below, there
                    will be a seperate "assertion", i.e. auth_token returned. 
                -->
                <saml:AttributeValue xsi:type="xs:string" Name="serviceid">service1</saml:AttributeValue>
                <saml:AttributeValue xsi:type="xs:string" Name="serviceid">service2</saml:AttributeValue>
            </saml:Attribute>
   
        </saml:AttributeStatement>

    </samlp:Extensions>

</samlp:AuthnRequest>

<saml:Assertion xmlns:saml=”urn:oasis:names:tc:SAML:2.0:assertion”
    ID="b07b804c-7c29-ea16-7300-4f3d6f7928ac"
    Version="2.0"
    IssueInstant="2005-01-31T12:00:00Z">
    
    <saml:Issuer Format="app@host#user">https://idp.y.c/</saml:Issuer>

    <!-- signature of the assertion -->
    <ds.Signature>....</ds.Signature>
    
    <saml:Subject>
        <saml:NameID Format="app@host#user">app@host#user</saml:NameID>
        <!-- info on how subject is verified: transport or key/challenge  -->
        <saml:SubjectConfirmation
           Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
           <saml:SubjectConfirmationData Address="host fqdn or ip">
		<ds:KeyInfo></ds:KeyInfo>
           </saml:SubjectConfirmationData>
        </saml:SubjectConfirmation>
    </saml:Subject>

    <saml:Conditions
        NotBefore="2005-01-31T12:00:00Z"
        NotOnOrAfter="2005-01-31T12:10:00Z">

        <saml:OneTimeUse/>

        <!-- who can proxy this assertion -->
        <saml:ProxyRestriction count="1">
            <saml:Audience>https://px.example.com/SAML2</saml:Audience>
        </saml:ProxyRestriction>
        <!-- who this assertion is intended -->
        <saml:AudienceRestriction>
           <saml:Audience Format="app@host#user">srvs-a@jzsrv.y.c#jz</saml:Audience>
        </saml:AudienceRestriction>
    </saml:Conditions>

    <saml:AuthnStatement
        AuthnInstant="2005-01-31T12:00:00Z">
        <saml:SubjectLocality Address="1.1.1.1" DNSName="jz.yahoo.com"/>
        <saml:AuthnContext>
            <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef>
        <saml:AuthenticatingAuthority/>
        </saml:AuthenticatingAuthority>
        </saml:AuthnContext>
    </saml:AuthnStatement>

    <saml:AttributeStatement>
    
        <!-- here we have roles and attributes like binary-hash, env, args, etc -->

        <saml:Attribute Name="binary">
            <!-- first one is the "main" executable, modules afterwards -->
            <saml:AttributeValue xsi:type="xs:string" subname="path2binary">hash_value1</saml:AttributeValue>
        </saml:Attribute>

        <saml:Attribute Name="rt-ctx">
            <saml:AttributeValue xsi:type="xs:string" Name="bin-dir">......</saml:AttributeValue>
            <saml:AttributeValue xsi:type="xs:string" Name="cmdargs">......</saml:AttributeValue>
            <saml:AttributeValue xsi:type="xs:string" Name="exe_cwd">......</saml:AttributeValue>
            <saml:AttributeValue xsi:type="xs:string" Name="exe_root">......</saml:AttributeValue>
            <saml:AttributeValue xsi:type="xs:string" Name="env:env1">......</saml:AttributeValue>
            <saml:AttributeValue xsi:type="xs:string" Name="env:env2">......</saml:AttributeValue>
        </saml:Attribute>

        <saml:Attribute Name="app-ctx">
            <saml:AttributeValue xsi:type="xs:string" Name="ctx-name">ctx_value</saml:AttributeValue>
        </saml:Attribute>

        <saml:Attribute Name="sys-ctx">
            <saml:AttributeValue xsi:type="xs:string" Name="ctx-name">ctx_value</saml:AttributeValue>
        </saml:Attribute>

        <saml:Attribute Name="roles">
            <saml:AttributeValue xsi:type="xs:string">{servicename}.admin</saml:AttributeValue>
        </saml:Attribute>

   </saml:AttributeStatement>

</saml:Assertion>


------------
Random Notes
------------

- normally the service/proxy must check the remote address of the socket to match its assertion, when behind the NAT,it would not work because the IP is changed - relaxing the address check and rely on host public key in this case.

Reauthentication: if the token expires or so demanded by the service or authorization service.

Q: how to make the token non-transferable? if not behind NAT, check remote address and match host of app@host#user. If behind NAT, how??? SSL mutual cert authentication so that its not possible to reuse the token, this way the server is sure the connection originated from the client. Or, a simple solution: server generates a random # encrypt it with its timestamp using client's public key, the client return with (random#+1 & timestamp+1) encrypted with server public key, then server can verify. In it's initial assertion, the client may suggest server challenge if non-transferability is important, after server receives the assertion prohibiting transfering, it would first check remote address and if mismatch (with NAT), issue challenge.

----------
Delegation
----------

Delegation - make the token transferable in a controlled manner:

- client generates a challenge (random # & its timestamp), encrypted that with the delegate and the service's public key, sent as part of the assertion
- delegate, as part of its assertion, must have the (random # +1 and timestamp+1) encrypted with the service's public key, server can compare after receiving both.


-------------------
Protocol definition
-------------------

Client->Agent: please identify and assert my authenticity, also sign my ctx, the secrets 
               will be using, also give back or store my authz-tkns please

{
    #BEGIN authN request [All optional except 1st]

    "authn-tkn" : [ # authn_tkn type, mandatory, any combination of "basic", "binary", "execution", "proxyctx", "sysctx"
        "...",
        "..."
    ],

    #optional challenge from server, preferrable rand# + validity signed by server against replay
    "challenge" : "...", 
    
    #extra binaries need to hash and sign, if "binary" auth is req'd 
    "bin-hash" : [
         "path/to/exe-1" : "",
         "path/to/exe-2" : ""
    ],

    #environs need to retrieve and sign, if "execution" is req'd 
    "env-list" : [
         "name1" : "",
         "name2" : ""
    ],

    #optional app-ctxs need to sign, possible for any authn type
    "app-ctx" : [
         "name1" : "value2",
         "name2" : "value2"
    ],

    #sys-ctxs need to retrieve and sign, if "sysctx" is req'd
    "sys-ctx" : [
         "name1" : ""
         "name2" : ""
    ],

    #proxy ctx

    "proxy-ctx" : [ # proxy with the following authn_tkn characteristics can act on my behalf
        "app@host#user" : {
          "token_type: "..."
          "authn_type" : "TPM", # TPM, HSM, PubK, SymK, 2F, ...
          "srvs-list : [
                {
                    "srvs-id" : "app@host#user"
                    "srvs-proxy-ctx" : {
                        # srvs-proxy context specific to service   
                    },
                    "transitive" : "false"
                }
          ]  
        }
    ]


    #END authN request [All optional]

    #Sign my public keys if you will
    "key-sign" : [
          {
               "algo" : "...",
               "name" : "...",
               "pubk" : "...",
               "usage" : "..."
          }
    ],

    #Sign my certs (csr) if you will
    "cert-sign" : [
          "csr" : "...",
    ],

    #AuthZ tkn storage you may provide
    "authz-tkn" : [ 
          # GET
          [
              "srvs-id" : "service-00",
              "srvs-id" : "service-01",
          ],
          # PUT
          {
              "srvs-id" : "service-01",
              "authz-tk" : "tkn-in-b64"
              "ttl" : "in seconds"
          }
    ]
}

Agent->Client: here's my assertion for you, together with your ctx signed

{
    # Authn-tkn cert/pubK accessible to all, hence not it's included
    # Accessible via https from localhost or from local filesystem.

    # Each *-sig is calculated (sha1WithRSAencryption) with its applicable
    # items, the following two and challenge if prensented.

    "sig_salt" : "....",
    "validty"  : "from-to in seconds after unix epoc",  
    "authn_type" : "TPM", # TPM, HSM, PubK, SymK, 2F, ...
    "authn_algo" : "sha1-rsa"
    "authn-sig" : "b64 hash" of all three
    
    "authn-tkn" : [

        "subject" : "app@host#user" 
        
        "bin-ctx" : { 
	        "bin-hash" : "exe hex hash"
            "path/to/exe-1" : "",
            "path/to/exe-2" : ""
        },

        "exe-ctx" : {
	          "bin-dir"  : "/home/jz/bin"
	          "cmd-arg  : "space seperated"
              "cwd" : "/"
              "root" : "/"
           	  "env-list" : [ # only if req'd
                   "name1" : "value2"
                   "name2" : "value2"
              ],
        },
        
        "app-ctx" : [ # exactly as requested
             "name1" : "value2",
             "name2" : "value2"
        ],
        
        "sys-ctx" : [ # only if requested
              
                  "name1" : "value2"
                  "name2" : "value2"
        ]

        "sig_salt" : "....",

        "validty"  : "from-to in seconds after unix epoc",  

        "authn_type" : "TPM", # TPM, HSM, PubK, SymK, 2F, ...

        "authn_algo" : "sha1-rsa"

        "authn-sig" : "b64 hash" of all three
    ]

    #proxy ctx

    "proxy-ctx-sig" : [ # proxy with the following authn_tkn characteristics can act on my behalf

        "app@host#user" : {

          "token_type: "..."
          "authn_type" : "TPM", # TPM, HSM, PubK, SymK, 2F, ...
          "srvs-list : [
                {
                    "srvs-id" : "app@host#user"
                    "srvs-proxy-ctx" : {
                        # srvs-proxy context specific to service   
                    },
                    "transitive" : "false"
                }
          ]
            
          "sig_salt" : "....",

          "validty"  : "from-to in seconds after unix epoc",  

          "authn_type" : "TPM", # TPM, HSM, PubK, SymK, 2F, ...

          "authn_algo" : "sha1-rsa"

          "authn-sig" : "b64 hash" of all three
  
        }
    ]

    #
    
    "key-sign" : [
          {
               "pubk" : "...",
               "sign" : "..."
          }
    ],

    "cert-sign" : [
          "cert" : "...",
    ],

    "authz-tkn" : [ 
          {
              "srvs-id" : "service-01",
              "auth-tk" : "tkn-in-b64"
          }
    ]
}

Example
=======

{
    "subject": "app@host#user",
    "bin-ctx": {
        "bin-hash": "exe hex hash",
        "path/to/exe-1": "",
        "path/to/exe-2": ""
    },
    "env-ctx": {
        "bin-dir": "/home/jz/bin",
        "cmd-arg": "spaceseperated",
        "cwd": "/",
        "root": "/",
        "env-list": [
            {
                "name1": "value2"
            },
            {
                "name2": "value2"
            }
        ]
    },
    "app-ctx": [
        {
            "name1": "value2"
        },
        {
            "name2": "value2"
        }
    ],
    "sys-ctx": [
        {
            "name1": "value2"
        },
        {
            "name2": "value2"
        }
    ],
    "proxy-ctx": {
        "app@host#user": {
            "authn_type": "TPM",
            "srvs-list": [
                {
                    "srvs-id": "app@host#user",
                    "srvs-proxy-ctx": {
                        "proxy-ctx": "arbituaryvalue"
                    },
                    "transitive": "false"
                }
            ]
        }
    },
    "sig_salt": "0123456789abcdef",
    "validty": "from-toinseconds",
    "authn_type": "TPM",
    "authn_algo": "sha1-ecc",
    "authn-sig": "b64hash"
}

"""
